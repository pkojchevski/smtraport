var app=angular.module("myApp",['ngRoute',"ngMessages","myApp.controllers", "myApp.services","myApp.directives",
    '720kb.datepicker',"myApp.filters",'angular-growl']).constant('_', window._);

app.config(["growlProvider", function(growlProvider) {
     growlProvider.globalTimeToLive(3000);
}]);


app.config(['$routeProvider','$httpProvider','growlProvider',
function($routeProvider, $httpProvider, growlProvider) {
    $routeProvider
                .when("/login", {
                templateUrl:"views/login.html",
                controller:"loginController"
            })
                .when("/daily", {
                templateUrl:"views/daily.html",
                controller:"dailyController",
                // resolve   : {
                //   loggedin : checkLoggedIn
                // }
    })
                .when("/weekly", {
                    templateUrl:"views/weekly.html",
                    controller:"weeklyController"
    })
                .when("/monthly", {
                templateUrl:"views/monthly.html",
                controller:"monthlyController"
    })
                .when("/yearly", {
                templateUrl:"views/yearly.html",
                controller:"yearlyController"
    })
                .when("/capacity", {
                templateUrl:"views/capacity.html",
                controller:"capacityController",
                resolve   : {
                  loggedin : checkLoggedIn
                }
    }).
                otherwise({
                  redirectTo:'/'
                });


    $httpProvider.interceptors.push(function($q, $location, $rootScope, messages) {
      return {
        response:function(response) {
          $rootScope.unauthorized = true;
          return response;
        },
        responseError:function(response) {
          if(response.status === 401) {
            $location.url('/login');
            return $q.reject(response);
            console.log("unauthorized");
            $rootScope.unauthorized = false;
          };
          if(response.status === 404) {
            $location.url('/login');
            console.log("user not found");
            return $q.reject(response);
          }
        }
      }
    });

  growlProvider.globalPosition('bottom-center');

  }]);

    var checkLoggedIn = function ($q, $location, $http, $timeout, $rootScope) {
      var deferred = $q.defer();
      $http.get('http://localhost:3000/loggedin').success(function(user) {
        $rootScope.errorMessage = null;
        if(user != 0) {
          console.log('checkLoggedIn');
          $rootScope.currentUser = user;
          if (user.role === 'admin') {
            $rootScope.checkRole = 'false';
          }
           if (user.role !== 'admin') {
            $rootScope.checkRole = 'true';
          }
          deferred.resolve();
        } else {
          $rootScope.errorMessage = "You need to login";
          deferred.reject();
          $location.url('/login');
        }
      });
      console.dir("deferred.promise:"+ JSON.stringify(deferred.promise));
      return deferred.promise;
    };



  app.config(function ($httpProvider) {
  $httpProvider.defaults.headers.common = {};
  $httpProvider.defaults.headers.put['Content-Type'] =  'application/json';
  $httpProvider.defaults.headers.post['Content-Type'] =  'application/json';
  $httpProvider.defaults.headers.delete = {};
  $httpProvider.defaults.headers.patch = {};
  $httpProvider.defaults.headers.options = {};
});

angular.module("myApp.controllers",[])
        .controller("capacityController",["$rootScope", "$scope", "$filter", "products", "productService",
         "messages","productsByOpis",
    function($rootScope, $scope, $filter, products, productService, messages, productsByOpis) {

             $scope.productIndex="";
             $scope.productOpis="";

       $scope.searchProducts=function() {
           if($scope.productIndex === "" && $scope.productOpis === "") {
          products.query().$promise.then(function(data) {
              $scope.products=data;

           });
              }
           if($scope.productIndex !== "" && $scope.productOpis === "") {
              products.get({"productIndex":$scope.productIndex}).$promise.then(function(data) {
                $scope.products=[];
                $scope.products.push(data);
           });
           }
           if($scope.productOpis !== "" && $scope.productIndex === "") {
             console.log("opissssssssssssss");
            productsByOpis.query({"description":$scope.productOpis}).$promise.then(function(data) {
              $scope.products=data;
           });

           }

       };
       $scope.editProduct=function(p) {
         console.log('p:'+JSON.stringify(p));
        $scope.id=p._id;
        $scope.productIndex=p.productIndex;
        $scope.productOpis=p.description;
        $scope.pcbsnapanel=p.pcbsonpanel;
        $scope.pcbsnagodzina=p.pcbs100;

        console.log('valid:'+$scope.capacityForm.$valid);

       };

         $scope.deleteProduct=function(p) {
           productService.delete({id:p._id}, function(success) {
             console.log(success);
              messages("delete");
              $scope.products=[];
              console.log("list is updated");
           });
       };

       $scope.addProduct = function (isValid) {
        $scope.submitted = true;
         console.log("isValid:" + isValid);
         if(isValid) {
           var product = {
               _id:$scope.id || "",
               productIndex:$scope.productIndex,
               description:$scope.productOpis,
               pcbsonpanel:$scope.pcbsnapanel,
               pcbs100:$scope.pcbsnagodzina,
               username:$rootScope.currentUser.username,
               createdAt:new Date().toJSON().slice(0,10)
               };
           var id_exists;
           products.query().$promise.then(function(data) {
           id_exists = $filter('findId')(product._id, data);
           console.log('id_exists:'+id_exists);
        if (id_exists) {
             productService.update({"id":$scope.id}, product).$promise.then(function(success) {
               $scope.clearFields();
               $scope.capacityForm.$setPristine();
              //  $scope.capacityForm.$setValidity();
              //  $scope.capacityForm.$setUntouched();
               messages("update");
              $scope.products = [product];
              console.log('product update:'+JSON.stringify(success));
        });
      } else {
        products.save(product, function(success) {
          $scope.clearFields();
          messages("add");
          $scope.products = [product];
            console.log('product save:'+JSON.stringify(success));
        });
      }
         });

}

   };

       $scope.clearFields=function() {
            $scope.id="";
            $scope.productIndex="";
            $scope.productOpis="";
            $scope.pcbsnapanel="";
            $scope.pcbsnagodzina="";
            $scope.products=[];
             $scope.capacityForm.$setPristine();
            // $scope.capacityForm.$setValidity();
            // $scope.capacityForm.$setUntouched();
          }
  }]);

angular.module("myApp.controllers")
    .controller("dailyController", ["$scope", "$timeout", "$http", "$filter", "$interval","dailyProduct", "dailyProductService",
    "columnChart", "pieChart", "dailyRecord", "dailyRecordService", "weeklyRecord","weeklyRecordService", "dailyRecordServiceDel", "weeklyProduct",
    "dailyRecordServiceDel", "weeklyProductService", "columnCharPP", "dailyRecordByDate", "dailyProductByDate","_","weeklyProductForData",
    function($scope, $timeout, $http, $filter,$interval, dailyProduct, dailyProductService, columnChart,
            pieChart, dailyRecord, dailyRecordService, weeklyRecord,weeklyRecordService, dailyRecordServiceDel, weeklyProduct,
            dailyRecordServiceDel, weeklyProductService, columnCharPP, dailyRecordByDate, dailyProductByDate, _, weeklyProductForData) {

        $scope.buttonClicked = false;
        $scope.productionDate = new Date().toJSON().slice(0,10);
        //$scope.productionDate = new Date("2016-11-24").toJSON().slice(0,10);
        console.log("productionDate:"+$scope.productionDate);
        $scope.ppDailyChart = [];
        $scope.npDailyChart = [];
        $scope._=_;
        function init() {
          console.log("init is runing");
        $scope.hour =  ["06-07","07-08","08-09","09-10","10-11","11-12","12-13","13-14",
                     "14-15","15-16","16-17","17-18","18-19","19-20","20-21","21-22"];

        $scope.prodData = {
            efficiency:["eff[%]",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            lineOpened:["Lin.Otwarta[min]",60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60],
            lineClosed:["Lin.Zamkn.[min]",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            lineEff:["Lin.Eff.[min]",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            npStops:["Niepl.Przest.[min]",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            target:["cel[%]",80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80],
            product1:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product2:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product3:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product4:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product5:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product6:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product7:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product8:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product9:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            product10:["#pcbs/g",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
          };

        $scope.np = {
            modelChange:["Zmiana modelu","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            changeSide:["Zmiana strony","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            changeVersion:["Zmiana wer.rynk.","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            missingComponent:["Brak komponentu","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            componentVerification:["Werifikacja komponentu","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            wrongPlStencil:["Żłe ułożony szablon","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            damagedStencil:["Uszkodzony szablon","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            DrukCleaningStencil:["Drukarka:Czyszczenie szablonu","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            DrukAddingPaste:["Drukarka:Dodanie pasty","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            DrukDodanieVigon:["Drukarka:Dodanie vigon","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            DrukProgramCorrection:["Drukarka:Korekprog","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            DrukPaperChange:["Drukarka:Wympapieru","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            PNPBadmark:["PNP:Badmarki","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            PNPpickComponent:["PNP:pobieranie komponentu","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            PNPprogramCorrection:["PNP:Korekcja programu","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            PNPtrayChange:["PNP:wymiana tacki","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            PNPcleaningNozzle:["PNP:czyszczenie ssawek","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            PNPfeederChange:["PNP:wymiana feedera","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            PNPripedFoil:["PNP:Zerwana taśma","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            Reflow:["Piec","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            AOIcorrection:["AOI korekcja programu","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            Transport:["Transport","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            Separation:["Separacja płytek","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            Validation:["Walidacja 1 płytki","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            othernp1:["Inny","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            othernp2:["Inny","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            othernp3:["Inny","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      };

      $scope.pp = {
        linePreparing:["Przygotow.Linii","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        meeting:["Zebranie","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        pause:["Przerwa","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        noPlan:["Zakończenie plany","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        preventive:["Konserwacja","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        inventory:["Inwentura","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        testy:["Testy(Trace, NPI,..)","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        missOperator:["Brak operatorów","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        missComponent:["Brak Komponentów","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        qualityIssue:["Problem Jakościowy","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        otherpp1:["inny","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        otherpp2:["inny","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        otherpp3:["inny","",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        };

           $scope.dailyRecords=[
               {
             dailyRecordsId:"",
             arrName:"",
             arrIndex:"",
             arrIndexValue:""
         }];

         $scope.product = {};

         $scope.products=[product1={},product2={},product3={},product4={},product5={},product6={},
           product7={},product8={},product9={},product10={}];

$scope.prodDataTot = {
    efficiencyTot:[0,0,0],
    lineOpenedTot:[0,0,0,0],
    lineClosedTot:[0,0,0,0],
    lineEffTot:[0,0,0,0],
    npStopsTot:[0,0,0,0],
    targetTot:[0,0,0],
    product1Tot:[0,0,0],
    product2Tot:[0,0,0],
    product3Tot:[0,0,0],
    product4Tot:[0,0,0],
    product5Tot:[0,0,0],
    product6Tot:[0,0,0],
    product7Tot:[0,0,0],
    product8Tot:[0,0,0],
    product9Tot:[0,0,0],
    product10Tot:[0,0,0]
};


$scope.ppTot = {
    linePreparingTot:[0,0,0,0],
    meetingTot:[0,0,0,0],
    pauseTot:[0,0,0,0],
    noPlanTot:[0,0,0,0],
    preventiveTot:[0,0,0,0],
    inventoryTot:[0,0,0,0],
    testyTot:[0,0,0,0],
    missOperatorTot:[0,0,0,0],
    missComponentTot:[0,0,0,0],
    qualityIssueTot:[0,0,0,0],
    otherpp1Tot:[0,0,0,0],
    otherpp2Tot:[0,0,0,0],
    otherpp3Tot:[0,0,0,0]
};


$scope.npTot ={
   modelChangeTot:[0,0,0,0],
   changeSideTot:[0,0,0,0],
   changeVersionTot:[0,0,0,0],
   missingComponentTot:[0,0,0,0],
   componentVerificationTot:[0,0,0,0],
   wrongPlStencilTot:[0,0,0,0],
   damagedStencilTot:[0,0,0,0],
   DrukCleaningStencilTot:[0,0,0,0],
   DrukAddingPasteTot:[0,0,0,0],
   DrukDodanieVigonTot:[0,0,0,0],
   DrukProgramCorrectionTot:[0,0,0,0],
   DrukPaperChangeTot:[0,0,0,0],
   PNPBadmarkTot:[0,0,0,0],
   PNPpickComponentTot:[0,0,0,0],
   PNPprogramCorrectionTot:[0,0,0,0],
   PNPtrayChangeTot:[0,0,0,0],
   PNPcleaningNozzleTot:[0,0,0,0],
   PNPfeederChangeTot:[0,0,0,0],
   PNPripedFoilTot:[0,0,0,0],
   ReflowTot:[0,0,0,0],
   AOIcorrectionTot:[0,0,0,0],
   TransportTot:[0,0,0,0],
   SeparationTot:[0,0,0,0],
   ValidationTot:[0,0,0,0],
   othernp1Tot:[0,0,0,0],
   othernp2Tot:[0,0,0,0],
   othernp3Tot:[0,0,0,0]
};
        }

/////////////// initialization ////////////////////
        init();

// refreshing page
var refreshProducts = function() {
     dailyProductByDate.query({"prodData":$scope.productionDate}).$promise.then(function(data) {
          for (var i = 0; i<$scope.products.length; i++) {
            $scope.products[i] = data[i];
          }
          console.log("dailyproducts:"+JSON.stringify($scope.products));
    });
};
//
$scope.saveShowProductsDaily = function(arr) {
  console.log("save product:"+JSON.stringify(arr));
    dailyProduct.save(arr, function(success) {
        refreshProducts();
});

};



$scope.refreshDailyData = function() {
  var o ={};
    dailyRecordByDate.query({"prodData":$scope.productionDate}).$promise.then(function(data) {
             //write data in objects
           for(var i = 0; i < data.length; i++){
               var obj = data[i].name.split(" ")[0];
               var klasa = data[i].name.split(" ")[1];
               var id = data[i].index;
               var name = data[i].name;
               var x,y = {};
                   //write data from db to local objects
               if ($filter("checkForNumbers")(name, parseInt(id), parseInt(data[i].value))) {
                  $scope.$eval(obj+"."+klasa)[id] = data[i].value;
                }
                if (!($filter("checkForNumbers")(name, parseInt(id), parseInt(data[i].value)))) {
                   $scope.$eval(obj + "." + klasa)[id] = data[i].details;
                 }
               };
                  //calculations
                     $filter('calcStops')($scope.prodData.lineClosed, $scope.pp);
                     $filter('calcStops')($scope.prodData.npStops,$scope.np);
                     $scope.prodData.lineOpened=$filter("getLineOpened")($scope.prodData.lineClosed);
                     $scope.prodData.efficiency=$filter("calcEffArr")($scope.products,
                     $scope.prodData.lineOpened,$scope.prodData);
                     $scope.prodData.lineEff=$filter("calcLineEff")($scope.prodData.efficiency, $scope.prodData.lineOpened);
                     $filter('calcTot')($scope.prodData,$scope.prodDataTot);
                     $filter('calcTot')($scope.pp, $scope.ppTot);
                     $filter('calcTot')($scope.np, $scope.npTot);
                     $scope.prodDataTot.efficiencyTot[0]=$filter("calcAverageEff")(1,8,$scope.prodData.efficiency);
                     $scope.prodDataTot.efficiencyTot[1]=$filter("calcAverageEff")(9,16,$scope.prodData.efficiency);
                     $scope.prodDataTot.efficiencyTot[2]=$filter("calcAvgEffTot")($scope.prodDataTot.efficiencyTot[1],$scope.prodDataTot.efficiencyTot[0]);
                     $filter('calcRatioProdData')($scope.prodDataTot);
                     $filter('calcRatio')($scope.npTot, $scope.prodDataTot, "npStopsTot");
                     $filter('calcRatio')($scope.ppTot, $scope.prodDataTot, "lineClosedTot");
                              //planed stops chart
                   pieChart(parseInt($scope.prodDataTot.lineOpenedTot[3]),'Lotw.',parseInt($scope.prodDataTot.lineClosedTot[3]),'PP','container1');
                              //unplaned stops chart
                   pieChart(parseInt($scope.prodDataTot.lineEffTot[3]),'Leff.',parseInt($scope.prodDataTot.npStopsTot[3]),'NP','container2');
   //                           //wydajnośc SMT chart
                   columnChart($filter("getArrayNumbers")($scope.prodData.efficiency),$filter("getArrayNumbers")($scope.prodData.target),$scope.hour,'container');
   ////                           //planned stops chart
                    $filter('sorter')($filter("getEff")($scope.ppTot), $filter("getNames")($scope.pp), 'x');
                    $filter('sorter')($filter("getEff")($scope.ppTot), $filter("getNames")($scope.pp), 'y')
  //                  columnCharPP(x.xval,[],y.yval,'container10');
  //  //                           //unplaned stops chart
  //                  columnCharPP($filter("getEff")($scope.npTot),[],$filter("getNames")($scope.np),'container11');
  //                 console.log('sorter:', $filter('sorter')($filter("getEff")($scope.npTot), $filter("getNames")($scope.np), 'x'));

              });
            };

        $scope.addDailyRecord = function(o) {
            dailyRecord.get({"recordId":o.recordId}).$promise.then(
          function(data) {
            console.log("put data:"+JSON.stringify(data))
              if (JSON.stringify(data) !== '{}') {
                //put
                dailyRecordService.update({"recordId":o.recordId}, o).$promise.then(function(success) {
                      console.log("record is updated");
                });
            } else {
              dailyRecord.save(o, function(success) {
                    console.log("record is saved");
              });
            }
          });
        };

        $scope.addWeeklyProduct = function(o) {
            weeklyProductForData.query({"prodData":o.prodData}).$promise.then(
          function(data) {
              var updateProduct;
            console.log("xyxyxyxyxyxyxy:"+JSON.stringify(data));
              if (JSON.stringify(data) !== '[]') {
                updateProduct = angular.copy(o);
                for (var i = 0 ; i < data.length; i++) {
                  if(data[i].productIndex === updateProduct.productIndex) {
                    updateProduct.dailyQuantity = parseInt(updateProduct.dailyQuantity) + parseInt(data[0].dailyQuantity);
                    updateProduct._id = data[0]._id;
                  }
                }
                //put
                weeklyProductService.update({"id":updateProduct._id}, updateProduct).$promise.then(function(success) {
                      console.log("product is updated");
                });
            } else {

              weeklyProduct.save(o, function(success) {
                    console.log("product is saved!");
              });
            }
               console.log("ooooooooooooooooo:"+JSON.stringify(o));
            dailyProductService.delete({"id":o._id}, function(success) {
             console.log("success:"+ JSON.stringify(success));
                   console.log("products deleted!");
               });
          });
        };

        $scope.addWeeklyRecord = function(o) {
          weeklyRecord.get({"weeklyRecordId":o.weeklyRecordId}).$promise.then(
          function(data) {
              if (JSON.stringify(data) !== '{}') {
                //put
                o._id = data._id;
                weeklyRecordService.update({"id":o._id}, o).$promise.then(function(success) {
                      console.log("record is updated");
                });
            } else {
              weeklyRecord.save(o, function(success) {
                    console.log("record is saved");
              });
            }
             });
        };

///--------------------------------refreshh-------------------------------

$scope.refreshDailyData();
    refreshProducts();
   $interval(function() {
     console.log('interval is running');
    $scope.refreshDailyData();
  }, 600000);

//
// //--------------save weekly records1-------------------------------//

var saveWeekRec = function() {
    var weekObj={};
    var textarr;
    var textarr1;
    var name;
    var arrTotNames=$filter("getAllNames")($scope.npTot,"npTot.", $scope.ppTot,"ppTot.", $scope.prodDataTot,"prodDataTot.");
        for(var i = 0; i < arrTotNames.length; i++) {
            if($scope.$eval(arrTotNames[i])[2] !== 0 && arrTotNames[i].indexOf("product") === -1) {
               textarr = arrTotNames[i].split(".")[1];
               textarr = textarr.substring(0, textarr.length-3);
               textarr1 = arrTotNames[i].split(".")[0];
               textarr1 = textarr1.substring(0, textarr1.length-3);
               name = (arrTotNames[i]);
                   weekObj = {
                        weeklyRecordId:textarr + i + $scope.productionDate,
                        name:arrTotNames[i],
                        text:$scope.$eval(textarr1 + "." + textarr)[0],
                        value:$scope.$eval(arrTotNames[i])[2],
                        dateOfProd:moment($scope.productionDate),
                        details:getDetails(name)//$scope.$eval(name.substring(0, name.length-3))[1] || ""
                      };

           }
              }
              dailyRecord.query().$promise.then(function(data) {
                 for(var i = 0; i < data.length; i++) {
                   dailyRecordServiceDel.delete({"id":data[i]._id}, function(success) {
                     console.log("delete records success");
                  });
                }

           });
       };

var getDetails = function(name) {
  var obj1 = (name).split(".")[0];
  var arr = (name).split(".")[1];
if(obj1 !== "prodDataTot") {
  return $scope.$eval(
    obj1.substring(0, obj1.length-3) + "." +
    arr.substring(0, arr.length-3)
  )[1];
} else {
  return "";
}

}


//save weekly production//////////////////////////////
var saveWeekProd = function() {
    var product;
    var i;
    dailyProduct.query().$promise.then(function(data) {
        for(i =0; i < data.length; i++) {
          console.log("produuuuuuuuucts:"+JSON.stringify(data[i]));
            product = data[i];
            //product.prodData = $scope.productionDate;
            $scope.addWeeklyProduct(product);
        }

    });
};

// //-----------------clicking reset button-------------------------------//
$scope.reset = function() {
    console.log("button clicked!");
    saveWeekProd();
    saveWeekRec();

    $scope.product = {};
    $scope.products=[product1={},product2={},product3={},product4={},product5={},product6={},
      product7={},product8={},product9={},product10={}];

    init();
      pieChart(parseInt($scope.prodDataTot.lineOpenedTot[3]),'Lotw.',parseInt($scope.prodDataTot.lineClosedTot[3]),'PP','container1');
//                           //unplaned stops chart
      pieChart(parseInt($scope.prodDataTot.lineEffTot[3]),'Leff.',parseInt($scope.prodDataTot.npStopsTot[3]),'NP','container2');
////                           //wydajnośc SMT chart
      columnChart($filter("getArrayNumbers")($scope.prodData.efficiency),$filter("getArrayNumbers")($scope.prodData.target),$scope.hour,'container');
//////                           //planned stops chart
     columnCharPP($filter("getEff")($scope.ppTot),[],$filter("getNames")($scope.pp),'container10');
////                           //unplaned stops chart
     columnCharPP($filter("getEff")($scope.npTot),[],$filter("getNames")($scope.np),'container11');
  };
      }]);

angular.module('myApp.controllers').
controller("loginController", ['$scope','$location','$rootScope', 'SecurityService','messages',
 function($scope, $location, $rootScope, SecurityService, messages) {

$scope.login = function(user) {
  console.log("user:"+user.username+' password:'+user.password);
  SecurityService.login(user, function(userCallback) {
    console.log("usuario:"+JSON.stringify(userCallback));
    if(userCallback === "Unauthorized") {
      messages(userCallback);
      $scope.user.username = "";
      $scope.user.password = "";
    } else {
      $location.url('/daily');
    }

  });
};




}]);

angular.module("myApp.controllers")
        .controller("monthlyController",["$scope",function($scope) {


}]);

angular.module('myApp.controllers').
controller('NavCtrl', ['$scope','$location','SecurityService', function($scope, $location, SecurityService) {

$scope.logout = function() {
      SecurityService.logout(function(response) {
        console.log("Logout!");
        $location.url('/');
      });
}


}]);

var app=angular.module("myApp.controllers")
        .controller("weeklyController",["$scope", "$filter", "$timeout", "columnChart",
    "pieChart","columnCharPP", "weeklyProductForPeriod", "weeklyRecordForPeriod",
    function($scope, $filter, $timeout, columnChart, pieChart, columnCharPP, weeklyProductForPeriod,
    weeklyRecordForPeriod) {

    $scope.day = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];

                function arrangeRecords(arr) {
                   var days = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];
                   var arr2=[];
                   var exists;
                   var index1;

                     if (arr.length) {
                        arr2[0] = {
                           name:arr[0].name,
                           text:arr[0].text,
                           calweek:moment(arr[0].dateOfProd, "YYYY-MM-DD").isoWeek(),
                           values:[0,0,0,0,0,0,0],
                           details:arr[0].details
                   };
                        arr2[0].values[$filter("convertDayInNumber")(arr[0].dateOfProd,days)] =  parseInt(arr[0].value);
                       for (var i = 1; i < arr.length; i++) {
                           exists=true;
                           var j=0;
                          for (j = 0; j < arr2.length; j++) {
                              if (arr2[j].text === arr[i].text) {
                                  exists = exists * false;
                                      index1=j;
                              } if (arr2[j].text !== arr[i].text) {
                                  exists = exists * true;
                                  index1 = j;
                              }
                          }
                          if (!exists) {
                          arr2[index1].values[$filter("convertDayInNumber")(arr[i].dateOfProd,days)] = parseInt(arr[i].value);
                          } if (exists) {
                                arr2[index1+1] = {
                                    name:arr[i].name,
                                    text:arr[i].text,
                                    calweek:moment(arr[i].dateOfProd, "YYYY-MM-DD").isoWeek(),
                                    values:[0,0,0,0,0,0,0],
                                    details:arr[i].details
                                };
                               arr2[index1+1].values[$filter("convertDayInNumber")(arr[i].dateOfProd,days)] = parseInt(arr[i].value);
                          }
                       }
                       return arr2;
                   } else {
                       return [];
                   }
                   }

                function arrangeProducts(arr) {
                   var days = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];
                       var arr2=[];
                       var exists;
                       var index1;
                       if(arr.length) {
                       arr2[0] = {
                           productIndex:arr[0].productIndex,
                           pcbs100:arr[0].pcbs100,
                           calweek:moment(arr[0].prodData, "YYYY-MM-DD").isoWeek(),
                           pcbsonpanel:arr[0].pcbsonpanel,
                           description:arr[0].description,
                           productId:arr[0].productId,
                           weeklyQuantity:[0,0,0,0,0,0,0]
                   };
                         arr2[0].weeklyQuantity[$filter("convertDayInNumber")(arr[0].prodData, days)]
                          = parseInt(arr[0].dailyQuantity);

                       for (var i = 1; i < arr.length; i++) {
                           exists=true;
                           var j=0;
                          for (j = 0; j < arr2.length; j++) {
                              if (arr2[j].productIndex === arr[i].productIndex) {
                                  exists = exists * false;
                                      index1=j;
                              } if (arr2[j].productIndex !== arr[i].productIndex) {
                                  exists = exists * true;
                                  index1 = j;
                              }
                          }
                          if (!exists) {
                            arr2[index1].weeklyQuantity[$filter("convertDayInNumber")
                            (arr[i].prodData, days)] +=
                                    parseInt(arr[i].dailyQuantity);
                          } if (exists) {
                                arr2[index1+1] = {
                                   productIndex:arr[i].productIndex,
                                   pcbs100:arr[i].pcbs100,
                                   calweek:moment(arr[i].prodData, "YYYY-MM-DD").isoWeek(),
                                   pcbsonpanel:arr[i].pcbsonpanel,
                                   description:arr[i].description,
                                   idProduct:arr[i].idProduct,
                                   weeklyQuantity:[0,0,0,0,0,0,0]
                                };
                               arr2[index1+1].weeklyQuantity[$filter("convertDayInNumber")
                               (arr[i].prodData, days)] = parseInt(arr[i].dailyQuantity);
                          }
                       }
                       return arr2;
                   } else {
                       return [];
                   }
                 };

        //----------------------function when button is clicked------------------------------------//
        var getProducts = function() {
            weeklyProductForPeriod.query({date1:$scope.date, date2:$scope.secDate}).$promise.then(function(data){
                $scope.productsWeekly = arrangeProducts(data);
                console.log("weeeeeeeeeklyProducts:"+JSON.stringify($scope.productsWeekly));
            });
        };
//
        var getRecords = function() {
            var k = 0;
            var j = 0;
            var l = 0;
            var pp = [];
            var np = [];
            var prodData = [];
            weeklyRecordForPeriod.query({date1:$scope.date,date2:$scope.secDate}).$promise.then(function(data) {
              console.log("datafor weekly record for period:"+JSON.stringify(data));
                for (var i = 0; i < data.length; i++) {
                    if (data[i].name.split(".")[0] === "prodDataTot") {
                        prodData[j] = data[i];
                        j=j+1;
                    }
                    if(data[i].name.split(".")[0] === "ppTot") {
                        pp[k] = data[i];
                        k=k+1;
                    }
                    if (data[i].name.split(".")[0] === "npTot") {
                        np[l] = data[i];
                        l=l+1;
                    }
                }

            $scope.prodDataWeekly = arrangeRecords(prodData);
            $scope.ppTotWeekly = arrangeRecords(pp);
            $scope.npTotWeekly = arrangeRecords(np);


            });
        };

//         //--------------click button Show------------------------//

    $scope.showDataForPeriod = function() {
        var eff=[];
        var lo;
        var lc;
        var leff;
        var npstops;
            getProducts();
            getRecords();
            $timeout(function() {
                $scope.prodDataWeeklyTot = $filter("calcWeeklyRecordsTot")($scope.prodDataWeekly);
                $scope.ppTotWeeklyTot = $filter("calcWeeklyRecordsTot")($scope.ppTotWeekly);
                $scope.npTotWeeklyTot = $filter("calcWeeklyRecordsTot")($scope.npTotWeekly);
                $scope.productsWeeklyTot = $filter("calcWeeklyProductsTot")($scope.productsWeekly);
                console.log("$scope.npTotWeeklyTot:"+$scope.npTotWeeklyTot);

                  console.log("$scope.ppTotWeeklyTot:"+JSON.stringify($scope.ppTotWeeklyTot));
                    for(var i = 0; i < $scope.ppTotWeeklyTot.length; i++) {
                        $scope.ppTotWeeklyTot[i].values[1] = $filter("calcStopsPercent")($scope.prodDataWeekly,$scope.ppTotWeekly,
                        "prodDataTot.lineClosedTot", $scope.ppTotWeeklyTot[i].name);
                    }
                    for(i = 0; i < $scope.npTotWeeklyTot.length; i++) {
                        $scope.npTotWeeklyTot[i].values[1] = $filter("calcStopsPercent")($scope.prodDataWeekly,$scope.npTotWeekly,
                        "prodDataTot.npStopsTot", $scope.npTotWeeklyTot[i].name);
                    }
                    for(i = 0; i < $scope.prodDataWeeklyTot.length; i++) {
                        if($scope.prodDataWeeklyTot[i].name === "prodDataTot.efficiencyTot") {
                           $scope.prodDataWeeklyTot[i].values[0] = $filter("calcWeeklyEff")($scope.prodDataWeekly);
                        }
                        if($scope.prodDataWeeklyTot[i].name === "prodDataTot.lineClosedTot") {
                           $scope.prodDataWeeklyTot[i].values[1] = $filter("calcWeeklyClosed")($scope.prodDataWeeklyTot);
                           lc = parseInt($scope.prodDataWeeklyTot[i].values[1]);
                        }

                        if($scope.prodDataWeeklyTot[i].name === "prodDataTot.lineOpenedTot") {
                           $scope.prodDataWeeklyTot[i].values[1] = $filter("calcWeeklyLineOpened")($scope.prodDataWeeklyTot);
                           lo = parseInt($scope.prodDataWeeklyTot[i].values[1]);
                        }
                        if($scope.prodDataWeeklyTot[i].name === "prodDataTot.npStopsTot") {
                           $scope.prodDataWeeklyTot[i].values[1] = $filter("calcWeeklynpStops")($scope.prodDataWeeklyTot);
                           npstops = parseInt($scope.prodDataWeeklyTot[i].values[1]);
                        }
                        if($scope.prodDataWeeklyTot[i].name === "prodDataTot.lineEffTot") {
                           $scope.prodDataWeeklyTot[i].values[1] = $filter("calcWeeklyLineEff")($scope.prodDataWeeklyTot);
                           leff = parseInt($scope.prodDataWeeklyTot[i].values[1]);
                        }
                    }
                            //planed stops chart
                pieChart(lo,'Lotw.',lc,'PP','container3');
                           //unplaned stops chart
                pieChart(leff,'Leff.',npstops,'NP','container4');
//                           //wydajnośc SMT chart
                columnChart($filter("getWeeklyEff")($scope.prodDataWeekly),[80,80,80,80,80,80,80],$scope.day,'container');
////                           //planned stops chart
                columnCharPP($filter("getStops")($scope.ppTotWeeklyTot),[],$filter("getNamesFromArray")($scope.ppTotWeeklyTot),'container5');
//                           //unplaned stops chart
                columnCharPP($filter("getStops")($scope.npTotWeeklyTot),[],$filter("getNamesFromArray")($scope.npTotWeeklyTot),'container6');

            }, 1500);

    };
}]);

angular.module("myApp.controllers")
        .controller("yearlyController",["$scope",function($scope) {

}]);

angular.module("myApp.directives",[]).
    directive("pkListen",["$timeout", "$filter", "$rootScope", "pieChart", "columnChart",
    "dailyProduct", "dailyProductService", "columnCharPP",
    "dailyProductByDate", "_",
        function($timeout, $filter, $rootScope, pieChart, columnChart, dailyProduct,
           dailyProductService, columnCharPP, dailyProductByDate, _ ){
        return {
          restrict:"A",

          link:function(scope, elem, attr) {
              var activeElement;
              var klasa;
              var obj;
              var productId;
              var cellNr;

                  elem.on("click", function() {
                      elem[0].select();
                  });

              elem.on("keydown keypress change", function(event) {
                      activeElement = document.activeElement;
                      if(event.which === 13) {
                            activeElement.blur();
                  }
              });
             elem.on("blur", function() {
                 klasa = (attr.class).split(" ")[1];
                 obj = (attr.class).split(" ")[0];
                 if (!isNaN(parseInt(elem.val())) && elem.val() !== "") {
                        if ($filter("checkForNumbers")(attr.class, parseInt(attr.id), parseInt(elem.val()))) {
                          var dailyRec = {
                              recordId:attr.id+klasa,
                              name:attr.class,
                              index:attr.id,
                              value:elem.val(),
                              details:"",
                              prodData:scope.productionDate
                          };
                          console.log("dailyRec:"+JSON.stringify(dailyRec));
                         scope.addDailyRecord(dailyRec);
                            scope.$eval(obj+"."+klasa)[attr.id] = elem.val();
                            $filter('calcStops')(scope.prodData.lineClosed, scope.pp);
                            $filter('calcStops')(scope.prodData.npStops, scope.np);
                            scope.prodData.lineOpened=$filter("getLineOpened")(scope.prodData.lineClosed);
                            scope.prodData.efficiency=$filter("calcEffArr")(scope.products,
                                             scope.prodData.lineOpened,scope.prodData);
                            scope.prodData.lineEff=$filter("calcLineEff")(scope.prodData.efficiency, scope.prodData.lineOpened);
                            $filter('calcTot')(scope.prodData,scope.prodDataTot);
                            $filter('calcTot')(scope.pp, scope.ppTot);
                            $filter('calcTot')(scope.np, scope.npTot);
                            scope.prodDataTot.efficiencyTot[0]=$filter("calcAverageEff")(1,8,scope.prodData.efficiency);
                            scope.prodDataTot.efficiencyTot[1]=$filter("calcAverageEff")(9,16,scope.prodData.efficiency);
                            scope.prodDataTot.efficiencyTot[2]=$filter("calcAvgEffTot")(scope.prodDataTot.efficiencyTot[1],scope.prodDataTot.efficiencyTot[0]);
                            $filter('calcRatioProdData')(scope.prodDataTot);
                            $filter('calcRatio')(scope.npTot, scope.prodDataTot, "npStopsTot");
                            $filter('calcRatio')(scope.ppTot, scope.prodDataTot, "lineClosedTot");
                           //planed stops chart
                            pieChart(parseInt(scope.prodDataTot.lineOpenedTot[3]),'Lotw.',parseInt(scope.prodDataTot.lineClosedTot[3]),'PP','container1');
                                       //unplaned stops chart
                            pieChart(parseInt(scope.prodDataTot.lineEffTot[3]),'Leff.',parseInt(scope.prodDataTot.npStopsTot[3]),'NP','container2');
            //                           //wydajnośc SMT chart
                            columnChart($filter("getArrayNumbers")(scope.prodData.efficiency),$filter("getArrayNumbers")(scope.prodData.target),scope.hour,'container');
            ////                           //planned stops chart
                            columnCharPP($filter("getEff")(scope.ppTot),[],$filter("getNames")(scope.pp),'container10');
            //                           //unplaned stops chart
                            columnCharPP($filter("getEff")(scope.npTot),[],$filter("getNames")(scope.np),'container11');

                            ///record dailyQuantity to products_daily

                    if(attr.class.indexOf("product") !== -1) {
                        var productNr;
                        dailyProductByDate.query({"prodData":scope.productionDate}).$promise.then(function(data) {
                            for (var i =0; i < data.length; i++) {
                              productNr = parseInt(data[i].productId.substring(0,1));
                                 if(scope.$eval("prodDataTot."+"product"+(productNr+1)+"Tot")[2] !== 0) {
                                     data[i].dailyQuantity = scope.$eval("prodDataTot."+"product"+(productNr+1)+"Tot")[2];
                                        dailyProductService.update({id:data[i]._id}, data[i]).$promise.then(function(success) {
                                     });
                                 }
                             }
                                 });
                             }
                           }
                         }

                           if(!($filter("checkForNumbers")(attr.class, attr.id, elem.val()))) {
                             if (elem.val() !== "") {
                             scope.$eval(obj+"."+klasa)[1] = elem.val();
                             console.log("elem.vaaaaaaal()"+elem.val());
                             var dailyRec = {
                                 recordId:attr.id+klasa,
                                 name:attr.class,
                                 index:attr.id,
                                 value:"",
                                 details:elem.val(),
                                 prodData:scope.productionDate
                             };
                              scope.addDailyRecord(dailyRec);
                           }
                         }
            });
          }
        };
}]).

    directive("pkListenProduct", ["dailyProduct" ,"products",function(dailyProduct, products) {
        return {
            restrict:"A",
            link:function(scope,elem,attr) {
              var product={};
                elem.on("keydown keypress change", function(event) {
                      activeElement = document.activeElement;
                      if(event.which === 13) {
                            activeElement.blur();
                  }
              });
                var activeElem;
                elem.on("blur",function(e) {
                     activeElem=document.activeElement;
                        console.log("attr.id:"+attr.id);
                        products.get({productIndex:elem.val()}).$promise.then(function(data) {
                          console.log("products:"+JSON.stringify(data));
                            product._id = "";
                            product.productId = attr.id + scope.productionDate;
                            product.productIndex = data.productIndex;
                            product.description = data.description;
                            product.pcbsonpanel = data.pcbsonpanel;
                            product.pcbs100 = data.pcbs100;
                            product.prodData = scope.productionDate;
                            product.dailyQuantity = "";
                            scope.saveShowProductsDaily(product);
                            });
                });

            }

        };

}]).
    directive("pkLeave", ["$timeout", "$filter",function($timeout, $filter, addDays) {
        return {
            restrict:"A",
            link:function(scope,elem,attr) {
                elem.on("blur", function() {
                    $timeout(function() {
                    console.log("elem.val:"+elem.val());
                    console.log("date in directive:"+scope.date);
                    scope.secDate = $filter("addDays")(scope.date, 6);
                  }, 1500);

                });
            }
        };
}]).
        directive("scrollup",["$document", function($document) {
            return {
                restrict:"A",
                link: function(scope, elem, attrs) {
                    elem.on("click", function() {

                        function scrollToTop(element, to, duration) {
                            if (duration<0) return;

                            var difference=to-element.scrollTop;
                            var perTick=difference/duration * 10;

                              // console.log("difference:"+difference);
                              // console.log("perTick:"+perTick);

                            setTimeout(function() {
                               element.scrollTop=element.scrollTop+perTick;
                               scrollToTop(element,to,duration-10);
                            },10);
                        }
                        scrollToTop($document[0].body, 0, 500);
                    });
                }
            };
}]);

angular.module("myApp.filters", []).
        filter("getArrayNumbers", function() {
            return function(arr) {
         var arr1=[];
    for (var i=1; i<arr.length;i++) {
        arr1.push(arr[i]);
    }
    return arr1;

            };
}).
        filter("lineRatio", function() {
            return function(val1,val2){
                if(val1!==0) {
                   return (100*val1/(val1+val2)).toFixed(0);
                } else {
                    return 0;
                }
            };


        }).
                filter("getSumTot", function() {
                    return function(fIndex,arr) {
                        var total=0;
                        for(var i=fIndex;i<arr.length;i++) {
                        total+=parseInt(arr[i]);
                    }
                 return total;


                    };
        }).
                filter("getAverage", function() {
                return function(index,arr) {
                    var count=0;
                    var suma=0;
                        for (var i=index;i<arr.length;i++) {

                            if(arr[i]!==0) {
                                count+=1;
                                suma+=arr[i];
                            }
                        }
                        if (count!==0) {
                              return suma/count;
                        } else {
                            return 0;

                    }
                            };
        }).
                filter("getSum", function() {
                    return function(fIndex,lIndex,arr) {
                            var total=0;
                       for(var i=fIndex;i<=lIndex;i++) {

                           total+=parseInt(arr[i]);
    }
 return total;
                    };
        }).
                filter("calculateEff", function() {
                   return function(arr,lo,index,obj) {
                        var total=0;
                        var totalPercent;
                        for (var i = 0; i < arr.length; i++) {
                            if(arr[i] !== null && typeof arr[i] !== 'undefined') {
                                if(!isNaN(arr[i].pcbs100)) {
                                    total+=(60/lo)*(obj["product"+(i+1)][index]/arr[i].pcbs100);
                                }
                            }
                    }

                        totalPercent=parseInt((total*100).toFixed(0));
                        return totalPercent;
                    };
        }).

                filter("calcEffArr", function() {
                    return function(arr1,arr2,obj) {
                        var total;
                        var totPercent=[];
                        totPercent[0]="eff[%]";
                        for (var j = 1; j<arr2.length; j++) {
                            total=0;
                            for (var i=0; i <= arr1.length; i++) {
                                if(arr1[i] !== null && typeof arr1[i] !== 'undefined') {
                                if(!isNaN(arr1[i].pcbs100) && arr1[i].pcbs100 !== "0" && arr1[i].pcbs100 !== "undefined") {
                                    total += arr2[j] !== 0 ? (60/arr2[j])*(obj["product"+(i+1)][j]/arr1[i].pcbs100) : 0;
                                }
                        }
                            }
                             totPercent[j]=parseInt((total*100));
                    }
                    console.log("totPercent:"+totPercent);
                    return totPercent;
                    };
                }).


                filter("calcAverageEff",function() {
                  return function(findex,lindex,arr) {
                    var sum=0;
                    var counter=0;
                    for (var i =findex; i<=lindex;i++) {
                //        console.log(arr[i]);
                        if (arr[i]!==0) {
                            sum+=parseInt(arr[i]);
                            counter+=1;
                        }
                    }
                    if (sum!==0 && counter!==0) {
                        return (sum/counter).toFixed(0);
                    } else {
                    return 0;
                }
                };
        }).

                filter("calcAvgEffTot",function() {
                    return function(el1,el2) {
                            var calc;
                            if (el1*el2!==0) {
                                calc=(((parseInt(el1)+parseInt(el2))/2).toFixed(0));
                            } else {
                                calc=(parseInt(el1)+parseInt(el2));
                            }

                          return calc;

                      };
        }).

        filter("findPercent", function() {
            return function(val1,val2){
                if(val1!==0) {
                   return (100*val1/(val2)).toFixed(0);
                } else {
                    return 0;
                }
            };


        }).
                filter("getNames", function() {
                    return function(o) {
                        var names=[];
                        var i = 0;
                        for (var prop in o) {
                            if(o.hasOwnProperty(prop)) {
                                names[i]=[o[prop][0]];
                                i++;
                            }
                        }
                        return names;
                    };
        }).
                          filter("getEff", function() {
                    return function(o) {
                        var names=[];
                        var i = 0;
                        for (var prop in o) {
                            if(o.hasOwnProperty(prop)) {
                                names[i]=parseInt([o[prop][3]]);
                                i++;
                            }
                        }
                        return names;
                    };
        }).
                filter("getLineOpened", function() {
                    return function(arr) {
                        var arr2=[];
                        arr2[0]="Lin.Otwarta[min]";
                        for(var i=1; i< arr.length; i++) {
                            arr2[i] = 60 - arr[i];
                        }
                        return arr2;
                    };
        }).
                filter("calcLineEff", function() {
                    return function(arr1,arr2) {
                        var arr3=[];
                        arr3[0]="Lin.Eff.[min]";
                        for (var i=1; i<arr1.length; i++) {
                            arr3[i]=(arr1[i]*arr2[i]/100).toFixed(0);
                        }
                        return arr3;
                    };
        }).
                filter("getAllNames", function() {
                    return function(obj1,obj1str, obj2, obj2str, obj3,obj3str) {
                        var arr=[];
                        for (var p in obj1) {
                                arr.push(obj1str+p);
                            }
                            for (p in obj2) {
                                arr.push(obj2str+p);
                            }
                            for (p in obj3) {
                                arr.push(obj3str+p);
                            }
                            return arr;
                                            };
        }).
                  filter("convertDayInNumber", function() {
                return function(datum,arr) {
                    var dt=moment(datum);
                    var index;
                    for (var i=0;i<arr.length;i++) {
                        if(arr[i] === dt.format('dddd')) {
                            index=i;
                        }
                    }
                    return index;
        };
                 }).
        filter("calcWeeklyRecordsTot", function() {
            return function(arr) {
                var arr2=[];
                var num=0;
                for(var i = 0; i < arr.length; i++) {
                    if(arr[i].name !== "lineEffTot") {
                        arr2[i] = {
                            name:arr[i].name,
                            text:arr[i].text,
                            calweek:arr[i].calweek,
                            values:[arr[i].values.reduce(function(a,b){return parseInt(a)+parseInt(b);}),0] /* jshint loopfunc:true */
                        };
                    } if (arr[i].name === "lineEffTot") {
                        for(var j = 0; j < arr[i].values.length;i++) {
                            if(arr[i].values[j] !== 0) {
                                num += 1;
                            }
                        }
                        arr2[i] = {
                            name:arr[i].name,
                            text:arr[i].text,
                            calweek:arr[i].calweek,
                            values:[arr[i].values.reduce(function(a,b){return (parseInt(a)+parseInt(b))/num;}),0]
                        };
                    }
            }
            return arr2;
        };
                 }).

        filter("calcWeeklyProductsTot", function() {
            return function(arr) {
                var arr2=[];
                   for (var i = 0; i < arr.length; i++) {
                        arr2[i] = {
                            productIndex:arr[i].productIndex,
                            calmonth:arr[i].calweek,
                            monthlyQuantity:[arr[i].weeklyQuantity.reduce(function(a,b){return parseInt(a)+parseInt(b);}),0] /* jshint loopfunc:true */
                        };
            }
            return arr2;
        };
                 }).

        filter("calcAvgEffWeeklyTot",function() {
                    return function(arr) {
                        var calc;
                        var num=0;
                        for(var i =0; i < arr.length; i++) {
                            if (arr[i]!==0) {
                                num+=num;
                            }
                        }
                            calc = arr.reduce(function(a,b,num){ return (parseInt(a)+parseInt(b))/num;});
                          return calc;
                      };
        }).

        filter("calcStopsPercent", function() {
            return function(arr1,arr2,text,name) {
                var sum=0;
                var num=0;
                for(var i = 0; i < arr1.length; i++) {
                    if(arr1[i].name === text) {
                        num = parseInt(arr1[i].values.reduce(function(a,b){ return a+b; }));
                    }
                }
                for(var j = 0; j < arr2.length; j++) {
                         console.log("num:"+num);
                         console.log("name:"+name);
                      if(arr2[j].name === name) {
                    sum = arr2[j].values.reduce(function(a,b){ return a+b; });
                    if(num !== 0) {
                        console.log("sum:"+sum);
                       return (100*sum/num).toFixed(0);
                    } else {
                        return 0;
                    }
                  }
                  }
            };
        }).
        filter("calcWeeklyEff", function() {
            return function(arr) {
                var num = 0;
                var sum = 0;
               for(var i = 0; i < arr.length; i++) {
                  if(arr[i].name === "prodDataTot.efficiencyTot") {
                      for (var j = 0; j < arr[i].values.length; j++) {
                          if (arr[i].values[j] !== 0) {
                              num += 1;
                          }
                      }
                      sum = arr[i].values.reduce(function(a,b){return parseInt(a)+parseInt(b);}); /* jshint loopfunc:true */
                  }
                    }
                    if(num !== 0) {
                return (sum/num).toFixed(0);
                    } else {
                        return 0;
                    }
            };
        }).
        filter("calcWeeklyClosed", function() {
           return function(arr) {
               var lc = 0;
               var lo = 0;
               for(var i = 0; i < arr.length; i++) {
                  if(arr[i].name === "prodDataTot.lineClosedTot") {
                      lc = arr[i].values[0];
                  }
                  if(arr[i].name === "prodDataTot.lineOpenedTot") {
                      lo = arr[i].values[0];
                  }
              }
              if(lo !== 0) {
                  return (100*lc/(lo+lc)).toFixed(0);
              } else {
                  return 0;
              }

           };
        }).
                filter("calcWeeklyLineOpened", function() {
           return function(arr) {
               var lc = 0;
               var lo = 0;
               for(var i = 0; i < arr.length; i++) {
                  if(arr[i].name === "prodDataTot.lineOpenedTot") {
                      lo = parseInt(arr[i].values[0]);
                  }
                  if(arr[i].name === "prodDataTot.lineClosedTot") {
                      lc = parseInt(arr[i].values[0]);
                  }
              }
              if(lc !== 0) {
                  return (100*lo/(lo+lc)).toFixed(0);
              } else {
                  return 0;
              }

           };
        }).

        filter("calcWeeklynpStops", function() {
           return function(arr) {
               var np = 0;
               var ef = 0;
               for(var i = 0; i < arr.length; i++) {
                  if(arr[i].name === "prodDataTot.npStopsTot") {
                      np = parseInt(arr[i].values[0]);
                  }
                  if(arr[i].name === "prodDataTot.lineEffTot") {
                      ef = parseInt(arr[i].values[0]);
                  }
              }
              if(ef !== 0) {
                  return (100*np/(np+ef)).toFixed(0);
              } else {
                  return 0;
              }

           };
        }).

         filter("calcWeeklyLineEff", function() {
           return function(arr) {
               var np = 0;
               var ef = 0;
               for(var i = 0; i < arr.length; i++) {
                  if(arr[i].name === "prodDataTot.lineEffTot") {
                      ef = parseInt(arr[i].values[0]);
                  }
                  if(arr[i].name === "prodDataTot.npStopsTot") {
                      np = parseInt(arr[i].values[0]);
                  }
              }
              if(np !== 0) {
                  return (100*ef/(ef+np)).toFixed(0);
              } else {
                  return 0;
              }

           };
        }).
       filter("getNamesFromArray", function() {
           var arr2=[];
           return function(arr) {
              for(var i = 0; i < arr.length; i++) {
                  arr2[i] = arr[i].text;
              }
              return arr2;
           };
        }).
        filter("getStops", function() {
           var arr2=[];
           return function(arr) {
              for(var i = 0; i < arr.length; i++) {
                  arr2[i] = parseInt(arr[i].values[1]);
              }
              return arr2;
           };
        }).
        filter("getWeeklyEff", function() {
            var arr2=[];
            return function(arr) {
                for(var i =0; i < arr.length; i++) {
                    if(arr[i].name === "prodDataTot.efficiencyTot") {
                        for(var j = 0; j < arr[i].values.length; j++) {
                            arr2[j] = parseInt(arr[i].values[j]);
                        }
                    }
                }
                return arr2;
            };
        }).
        filter("findId", function() {
          return function(id, arr) {
            var exist = false;
            arr.filter(function(i, item) {
              if (i._id === id) {
                exist = true;
              }
            });
            return exist;
          }

        }).
        filter("calcStops", function() {
            return function(arr, o) {
                for(var i = 1; i < arr.length; i++) {
                    arr[i]=0;
                    for(var property in o) {
                        if(o.hasOwnProperty(property)) {
                            arr[i]+=parseInt(o[property][i+1]);
                        }
                    }
                }
            };
        }).
        filter("calcTot", function() {
           return function(o1,o2) {
               for(var i =1; i <= 8; i++) {
                   for(var property in o1) {
                        if(o1.hasOwnProperty(property)) {
                            if(property !== "efficiency" && property !== "target") {
                          o2[property+"Tot"][0] = o1[property].filter(function(i, item, value) { /* jshint loopfunc:true */
                             if(!isNaN(value[item]) && value[item] !== "") {
                                 return true;
                                 }
                          }).filter(function(i,item) {
                              if(item >= 0 && item <= 7) {
                              return true;
                          }
                    }).reduce(function(a,b) { /* jshint loopfunc:true */
                            return parseInt(a)+parseInt(b);
                          });
                          }
                        }
               }

         }
            for (i=9;i <= 16; i++) {
                   for(var property in o1) {
                        if(o1.hasOwnProperty(property)) {
                            if(property !== "efficiency" && property !== "target") {
                          o2[property+"Tot"][1] = o1[property].filter(function(i,item,value) { /* jshint loopfunc:true */
                             if(!isNaN(value[item]) && value[item]!=="") {
                                 return true;
                                 }
                             })
                              .filter(function(i,item) {
                              if(item >= 8 && item <= 16 ) {
                              return true;
                            }
                    }).reduce(function(a,b) { /* jshint loopfunc:true */
                            return parseInt(a)+parseInt(b);
                          });
                          o2[property+"Tot"][2]=o2[property+"Tot"][0]+o2[property+"Tot"][1];
                          }
                      }
               }
         }
           };

        }).
        filter("calcRatioProdData", function($filter) {
            return function(o) {
                o.lineEffTot[3]=o.efficiencyTot[2];
                o.lineOpenedTot[3]=$filter("lineRatio")(o.lineOpenedTot[2],o.lineClosedTot[2]);
                o.lineClosedTot[3]=$filter("lineRatio")(o.lineClosedTot[2],o.lineOpenedTot[2]);
                o.npStopsTot[3]=$filter("lineRatio")(o.npStopsTot[2],o.lineEffTot[2]);
            };
        }).
        filter("calcRatio", function() {
          return function(o1,o2,text) {
              for(var property in o1) {
                  if(o1.hasOwnProperty(property)) {
                      if (o2[text][2] !== 0) {
                      o1[property][3]=(100*o1[property][2]/o2[text][2]).toFixed(0);
                  } else {
                      o1[property][3]=0;
                  }
                  }
              }
          };
      }).
      filter("addDays", function() {
          return function(date,days) {
            var result = moment(date,'YYYY-MM-DD').add(days,'days').format("YYYY-MM-DD");
              if (date === "undefined") {
                return "";
                  } else {
                    return result;
                  }
          };
        }).
        filter('checkForNumbers', function() {
            return function(klasa, id, val) {
              var obj = (klasa).split(" ")[0] + id;
              if (obj !== "pp1" && obj !== "np1") {
                return true;
              }
              if ((obj === "pp1" || obj === "np1")) {
                return false;
              }
            }
        }).
        filter('sorter', function() {
          return function(xval, yval, r) {
            // console.log('xval:'+xval);
            //   console.log('yval:'+yval);
            var x = [];
            var xsorted = [];
            var y = [];
            var ysorted = [];
            var xo = {};
            var yo = {};
            for (var i = 0; i <= yval.length; i++) {
              yo = {
                [i]:yval[i],
              }
              y.push(yo);
            }
            for (var i = 0; i <= xval.length; i++) {
              xo = {
                xval:xval[i],
                number:i
              }
              x.push(xo);
            }
            console.log('x:'+JSON.stringify(x));
            console.log('y:'+JSON.stringify(y));
              xsorted = x.sort(function(a,b) {
                return b.xval-a.xval;
              });
            console.log('xsorted:'+JSON.stringify(xsorted));
            for (var i = 0; i <= y.length; i++) {
              console.log('x:'+JSON.stringify(xsorted[i].number));
              // console.log('y:'+JSON.stringify(y[xsorted[i]["number"])));
            }
          }
          return null;
        });

var services=angular.module("myApp.services",["ngResource"]);
  var localhost = "localhost:";
         services.factory('products', function($resource) {
           return $resource("http://"+localhost+"3000/products/:productIndex", {} , {
               get:{method:'GET', params:{productIndex:'@productIndex'}, isArray:false}

           });
           });

           services.factory("productService", function($resource) {
            return $resource("http://"+localhost+"3000/products/:id", {}, {
                 update:{method:"PUT", params:{id:'@id'}},
                 delete:{method:'DELETE', params:{id:"@id"}}
            });
                  });

          services.factory("productsByOpis", function($resource) {
           return $resource("http://"+localhost+"3000/products/description/:description", {}, {
                query:{method:"GET", params:{description:"@description"}, isArray:true}
           });
                 });

           services.factory("dailyRecord", function($resource) {
               return $resource("http://"+localhost+"3000/dailyrecords/:recordId",{}, {
                  get:{method:'GET', params:{recordId:'@recordId'}, isArray:false}
               });
           });

           services.factory("dailyRecordByDate", function($resource) {
               return $resource("http://"+localhost+"3000/dailyrecords/bydate/:prodData",{}, {
                  query:{method:'GET', params:{prodData:'@prodData'}, isArray:true}
               });
           });

           services.factory("dailyRecordService",function($resource) {
               return $resource("http://"+localhost+"3000/dailyrecords/:recordId",{}, {
                   update: {method:"PUT",params:{recordId:"@recordId"}},

               });
           });

           services.factory("dailyRecordServiceDel",function($resource) {
               return $resource("http://"+localhost+"3000/dailyrecords/:id",{}, {
                   delete: {method:"DELETE", params:{id:"@id"}}

               });
           });


           services.factory("dailyProduct",function($resource) {
               return $resource("http://"+localhost+"3000/dailyproducts/:productIndex",{}, {
                   get:{method:"GET", params:{productIndex:"@productIndex"}, isArray:false},
               });
           });

           services.factory("dailyProductByDate",function($resource) {
               return $resource("http://"+localhost+"3000/dailyproducts/bydate/:prodData",{}, {
                   update:{method:"GET", params:{prodData:"@prodData"}, isArray:true},
               });
           });

           services.factory("dailyProductService",function($resource) {
               return $resource("http://"+localhost+"3000/dailyproducts/:id",{}, {
                   update: {method:"PUT",params:{id:"@id"}},
                   delete:{method:'DELETE', params:{id:"@id"}}
               });
           });

           services.factory("weeklyRecord",function($resource) {
               return $resource("http://"+localhost+"3000/weeklyrecords/:weeklyRecordId",{}, {
                   get:{method:"GET", params:{weeklyRecordId:"@weeklyRecordId"}, isArray:false},                   g:{method:"GET", params:{weeklyRecordId:"@weeklyRecordId"}, isArray:true},
               });
           });

           services.factory("weeklyRecordForPeriod",function($resource) {
               return $resource("http://"+localhost+"3000/weeklyrecords/period/:date1/:date2",{}, {
                   update:{method:"GET", params:{date1:"@date1", date2:"@date2"}, isArray:true},
               });
           });

           services.factory("weeklyRecordService", function($resource) {
               return $resource("http://"+localhost+"3000/weeklyrecords/:id",{}, {
                   update: {method:"PUT",params:{id:"@id"}},
                   delete:{method:'DELETE', params:{id:"@id"}}
               });
           });

           services.factory("weeklyProduct",function($resource) {
               return $resource("http://"+localhost+"3000/weeklyproducts/:recordId",{}, {
                   query:{method:"GET", params:{recordId:"@recordId"}, isArray:true},
               });
           });

           services.factory("weeklyProductForData",function($resource) {
               return $resource("http://"+localhost+"3000/weeklyproducts/date/:prodData",{}, {
                   query:{method:"GET", params:{prodData:"@prodData"}, isArray:true},
               });
           });

           services.factory("weeklyProductForPeriod",function($resource) {
               return $resource("http://"+localhost+"3000/weeklyproducts/period/:date1/:date2",{}, {
                   query:{method:"GET", params:{date1:"@date1", date2:"@date2"}, isArray:true},
               });
           });

           services.factory("weeklyProductService", function($resource) {
               return $resource("http://"+localhost+"3000/weeklyproducts/:id",{}, {
                   update: {method:"PUT", params:{id:"@id"}},
                   delete:{method:'DELETE', params:{id:"@id"}}
               });
           });
//

services.factory("SecurityService", ['$http','$rootScope','$location','messages',
      function($http, $rootScope, $location, messages) {
        return {
          login : function(user, callback) {
            console.log("user in security Service:"+ JSON.stringify(user));
            $http.post('http://'+localhost+'3000/login', user).success(function(user) {
              $rootScope.currentUser = user;
              callback(user);
            }).
            error(function(error) {
              callback(error);
            });
          },

          logout : function(callback) {
            $http.post('http://'+localhost+'3000/logout').success(function() {
              $rootScope.currentUser = null;
              callback();
               $location.url('/login')
           });
          }

        }




      }]);

           services.factory("columnChart", function() {
            return function(eff,target,xvalues,container) {
                Highcharts.chart(container, {
            chart: {
                type: 'column',
                options3d: {
		enabled: true,
                alpha: 10,
                beta: 30,
                depth: 40 ,
                borderColor:'#303030',
                 frame: {
                            back: {
                                color: '#A3A3C2',
                                size: 4
                            },
                            bottom: {
                                color: '#DBB8FF',
                                size: 10
                            },
                            side: {
                                color: '#8099E6',
                                size: 2
                            }
                       }
            }
        },
        title: {text: ''},
        xAxis: {categories: xvalues},
        yAxis: {min:0,max:100,title:{text:"[%]"}},
        plotOptions: {
               series: {
                edgeColor:'#000000'
            },
    column: {
        borderColor:"black",
        zones: [{
            value: 80, // Values up to 80 (not including) ...
            color: '#ff4000' // ... have the color blue.
        },{
            color: '#00ff80' // Values from 80 (including) and up have the color red

        }]
          }
                  },

        series: [
//            {
//            type:"spline",
//            name:"Target[%]",
//            data:target,
//            showInLegend:false,
//            lineColor: Highcharts.getOptions().colors[10]
//        },
         {
            type:"column",
            name: '[%]',
            showInLegend:false,
            data: eff,
            borderColor:"black"
            //color: Highcharts.getOptions().colors[9]
        }
    ]
 });
 };
           });

              services.factory("columnCharPP", function() {
            return function(eff,target,xvalues,container) {
                Highcharts.chart(container, {
            chart: {
                type: 'column',
                options3d: {
 	enabled: true,
                alpha: 15,
                beta: 15,
                depth: 50
            }
        },
        title: {text: ''},
        xAxis: {categories: xvalues},
        yAxis: {min:0,max:100,title:{text:"[%]"}},

        series: [
            {
            type:"spline",
            name:"Target[%]",
            data:target,
            showInLegend:false,
            lineColor: Highcharts.getOptions().colors[10]
        },
         {
            type:"column",
            name: '[%]',
            showInLegend:false,
            data: eff,
            color: Highcharts.getOptions().colors[9]
        }
    ]
 });
 };
           });

           services.factory("pieChart", function() {
              return function(eff, efftext, stops, stopstext, container) {
                Highcharts.chart(container, {
                    chart: {type: 'pie', options3d: {enabled: true,alpha: 45,beta: 0 } },
                         title: { text: '',
                             style: { display:'none'}
                         },
                         tooltip: {
                             pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                         },
                         plotOptions: {
                             pie: {
                                 allowPointSelect: true,
                                 cursor: 'pointer',
                                 depth: 15,
                                 dataLabels: {enabled: true, format: '{point.name}'}
                             }
                         },
                         series: [{type: 'pie', name: '', data: [
                {
                    name: efftext,
                    y: eff,
                    sliced: true,
                    selected: true
                },
                [stopstext, stops]
            ]
                         }]
                     });
                 };
                            });

      services.factory("messages",["growl",function(growl) {
            return function(type) {
    var config = {};
    switch (type) {
      case "success":
        growl.success("Done!!!", config);
        break;
        case "add":
        growl.info("Produkt jest dodany!!!", config);
        break;
        case "update":
        growl.info("Produkt jest zaaktualizowany!!! ", config);
        break;
        case "delete":
        growl.info("Produkt jest usunięty!", config);
        break;
         case "error":
        growl.error("", config);
        break;
         case "wrongcode":
        growl.error("Błędny kod !!!", config);
        break;
        case "Unauthorized":
       growl.error("Wrong username or password!!!", config);
       break;
       case "userNotFound":
      growl.info("User not found!!!", config);
      break;
        default:
        growl.error("Pojawił się błąd, sprobuj ponownie!!!", config);
    }
  };
     }]);

//# sourceMappingURL=maps/app.min.js.map
